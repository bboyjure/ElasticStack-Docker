apm-server:
  host: 0.0.0.0:8200
  rum:
    enabled: true



#---------------------------- APM Server - Secure Communication with Agents ----------------------------

  # Enable secure communication between APM agents and the server. By default ssl is disabled.
  #ssl:
    #enabled: false

    # Path to file containing the certificate for server authentication.
    # Needs to be configured when ssl is enabled.
    #certificate: ''

    # Path to file containing server certificate key.
    # Needs to be configured when ssl is enabled.
    #key: ''

    # Optional configuration options for ssl communication.

    # Passphrase for decrypting the Certificate Key.
    # It is recommended to use the provided keystore instead of entering the passphrase in plain text.
    #key_passphrase: ''

    # List of supported/valid protocol versions. By default TLS versions 1.1 up to 1.3 are enabled.
    #supported_protocols: [TLSv1.1, TLSv1.2, TLSv1.3]

    # Configure cipher suites to be used for SSL connections.
    # Note that cipher suites are not configurable for TLS 1.3.
    #cipher_suites: []

    # Configure curve types for ECDHE based cipher suites.
    #curve_types: []

  # The APM Server endpoints can be secured by configuring a secret token or enabling the usage of API keys. Both
  # options can be enabled in parallel, allowing Elastic APM agents to chose whichever mechanism they support.
  # As soon as one of the options is enabled, requests without a valid token are denied by the server. An exception
  # to this are requests to any enabled RUM endpoint. RUM endpoints are generally not secured by any token.
  #
  # Configure authorization via a common `secret_token`. By default it is disabled.
  # Agents include the token in the following format: Authorization: Bearer <secret-token>.
  # It is recommended to use an authorization token in combination with SSL enabled,
  # and save the token in the apm-server keystore.
  #secret_token:

  # Enable API key authorization by setting enabled to true. By default API key support is disabled.
  # Agents include a valid API key in the following format: Authorization: ApiKey <token>.
  # The key must be the base64 encoded representation of the API key's "id:key".
  #api_key:
    #enabled: false

    # Restrict how many unique API keys are allowed per minute. Should be set to at least the amount of different
    # API keys configured in your monitored services. Every unique API key triggers one request to Elasticsearch.
    #limit: 100

    # API keys need to be fetched from Elasticsearch. If nothing is configured, configuration settings from the
    # output section will be reused.
    # Note that configuration needs to point to a secured Elasticsearch cluster that is able to serve API key requests.
    #elasticsearch:
      #hosts: ["localhost:9200"]

      #protocol: "http"

      # Username and password are only needed for the apm-server apikey sub-command, and they are ignored otherwise
      # See `apm-server apikey --help` for details.
      #username: "elastic"
      #password: "changeme"

      # Optional HTTP Path.
      #path: ""

      # Proxy server url.
      #proxy_url: ""
      #proxy_disable: false

      # Configure http request timeout before failing an request to Elasticsearch.
      #timeout: 5s

      # Enable custom SSL settings. Set to false to ignore custom SSL settings for secure communication.
      #ssl.enabled: true

      # Optional SSL configuration options. SSL is off by default, change the `protocol` option if you want to enable `https`.
      #
      # Control the verification of Elasticsearch certificates. Valid values are:
      # * full, which verifies that the provided certificate is signed by a trusted
      # authority (CA) and also verifies that the server's hostname (or IP address)
      # matches the names identified within the certificate.
      # * strict, which verifies that the provided certificate is signed by a trusted
      # authority (CA) and also verifies that the server's hostname (or IP address)
      # matches the names identified within the certificate. If the Subject Alternative
      # Name is empty, it returns an error.
      # * certificate, which verifies that the provided certificate is signed by a
      # trusted authority (CA), but does not perform any hostname verification.
      #  * none, which performs no verification of the server's certificate. This
      # mode disables many of the security benefits of SSL/TLS and should only be used
      # after very careful consideration. It is primarily intended as a temporary
      # diagnostic mechanism when attempting to resolve TLS errors; its use in
      # production environments is strongly discouraged.
      #ssl.verification_mode: full

      # List of supported/valid TLS versions. By default all TLS versions 1.0 up to
      # 1.2 are enabled.
      #ssl.supported_protocols: [TLSv1.0, TLSv1.1, TLSv1.2]

      # List of root certificates for HTTPS server verifications.
      #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

      # Certificate for SSL client authentication.
      #ssl.certificate: "/etc/pki/client/cert.pem"

      # Client Certificate Key
      #ssl.key: "/etc/pki/client/cert.key"

      # Optional passphrase for decrypting the Certificate Key.
      # It is recommended to use the provided keystore instead of entering the passphrase in plain text.
      #ssl.key_passphrase: ''

      # Configure cipher suites to be used for SSL connections.
      #ssl.cipher_suites: []

      # Configure curve types for ECDHE based cipher suites.
      #ssl.curve_types: []

      # Configure what types of renegotiation are supported. Valid options are
      # never, once, and freely. Default is never.
      #ssl.renegotiation: never


  #---------------------------- APM Server - RUM Real User Monitoring ----------------------------

  # Enable Real User Monitoring (RUM) Support. By default RUM is disabled.
  # RUM does not support token based authorization. Enabled RUM endpoints will not require any authorization
  # token configured for other endpoints.
  #rum:
    #enabled: false

    #event_rate:

      # Defines the maximum amount of events allowed to be sent to the APM Server RUM
      # endpoint per IP per second. Defaults to 300.
      #limit: 300

      # An LRU cache is used to keep a rate limit per IP for the most recently seen IPs.
      # This setting defines the number of unique IPs that can be tracked in the cache.
      # Sites with many concurrent clients should consider increasing this limit. Defaults to 1000.
      #lru_size: 1000

    #-- General RUM settings

    # A list of service names to allow, to limit service-specific indices and data streams
    # created for unauthenticated RUM events.
    # If the list is empty, any service name is allowed.
    #allow_service_names: []

    # A list of permitted origins for real user monitoring.
    # User-agents will send an origin header that will be validated against this list.
    # An origin is made of a protocol scheme, host and port, without the url path.
    # Allowed origins in this setting can have * to match anything (eg.: http://*.example.com)
    # If an item in the list is a single '*', everything will be allowed.
    #allow_origins: ['*']

    # A list of Access-Control-Allow-Headers to allow RUM requests, in addition to "Content-Type",
    # "Content-Encoding", and "Accept"
    #allow_headers: []

    # Custom HTTP headers to add to RUM responses, e.g. for security policy compliance.
    #response_headers:
    #  X-My-Header: Contents of the header

    # Regexp to be matched against a stacktrace frame's `file_name` and `abs_path` attributes.
    # If the regexp matches, the stacktrace frame is considered to be a library frame.
    #library_pattern: "node_modules|bower_components|~"

    # Regexp to be matched against a stacktrace frame's `file_name`.
    # If the regexp matches, the stacktrace frame is not used for calculating error groups.
    # The default pattern excludes stacktrace frames that have a filename starting with '/webpack'
    #exclude_from_grouping: "^/webpack"

    # If a source map has previously been uploaded, source mapping is automatically applied.
    # to all error and transaction documents sent to the RUM endpoint.
    #source_mapping:

      # Sourcemapping is enabled by default.
      #enabled: true

      # Source maps are always fetched from Elasticsearch, by default using the output.elasticsearch configuration.
      # A different instance must be configured when using any other output.
      # This setting only affects sourcemap reads - the output determines where sourcemaps are written.
      #elasticsearch:
        # Array of hosts to connect to.
        # Scheme and port can be left out and will be set to the default (`http` and `9200`).
        # In case you specify and additional path, the scheme is required: `http://localhost:9200/path`.
        # IPv6 addresses should always be defined as: `https://[2001:db8::1]:9200`.
        # hosts: ["localhost:9200"]

        # Protocol - either `http` (default) or `https`.
        #protocol: "https"

        # Authentication credentials - either API key or username/password.
        #api_key: "id:api_key"
        #username: "elastic"
        #password: "changeme"

      # The `cache.expiration` determines how long a source map should be cached before fetching it again from Elasticsearch.
      # Note that values configured without a time unit will be interpreted as seconds.
      #cache:
        #expiration: 5m

      # Source maps are stored in a separate index.
      # If the default index pattern for source maps at 'outputs.elasticsearch.indices'
      # is changed, a matching index pattern needs to be specified here.
      #index_pattern: "apm-*-sourcemap*"

  #---------------------------- APM Server - Agent Configuration ----------------------------

  # When using APM agent configuration, information fetched from Kibana will be cached in memory for some time.
  # Specify cache key expiration via this setting. Default is 30 seconds.
  #agent.config.cache.expiration: 30s

  #kibana:
    # For APM Agent configuration in Kibana, enabled must be true.
    #enabled: false

    # Scheme and port can be left out and will be set to the default (`http` and `5601`).
    # In case you specify an additional path, the scheme is required: `http://localhost:5601/path`.
    # IPv6 addresses should always be defined as: `https://[2001:db8::1]:5601`.
    #host: "localhost:5601"

    # Optional protocol and basic auth credentials.
    #protocol: "https"
    #username: "elastic"
    #password: "changeme"

    # Optional HTTP path.
    #path: ""

    # Enable custom SSL settings. Set to false to ignore custom SSL settings for secure communication.
    #ssl.enabled: true

    # Optional SSL configuration options. SSL is off by default, change the `protocol` option if you want to enable `https`.
    #
    # Control the verification of Kibana certificates. Valid values are:
    # * full, which verifies that the provided certificate is signed by a trusted
    # authority (CA) and also verifies that the server's hostname (or IP address)
    # matches the names identified within the certificate.
    # * strict, which verifies that the provided certificate is signed by a trusted
    # authority (CA) and also verifies that the server's hostname (or IP address)
    # matches the names identified within the certificate. If the Subject Alternative
    # Name is empty, it returns an error.
    # * certificate, which verifies that the provided certificate is signed by a
    # trusted authority (CA), but does not perform any hostname verification.
    #  * none, which performs no verification of the server's certificate. This
    # mode disables many of the security benefits of SSL/TLS and should only be used
    # after very careful consideration. It is primarily intended as a temporary
    # diagnostic mechanism when attempting to resolve TLS errors; its use in
    # production environments is strongly discouraged.
    #ssl.verification_mode: full

    # List of supported/valid TLS versions. By default all TLS versions 1.0 up to
    # 1.2 are enabled.
    #ssl.supported_protocols: [TLSv1.0, TLSv1.1, TLSv1.2]

    # List of root certificates for HTTPS server verifications.
    #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

    # Certificate for SSL client authentication.
    #ssl.certificate: "/etc/pki/client/cert.pem"

    # Client Certificate Key
    #ssl.key: "/etc/pki/client/cert.key"

    # Optional passphrase for decrypting the Certificate Key.
    # It is recommended to use the provided keystore instead of entering the passphrase in plain text.
    #ssl.key_passphrase: ''

    # Configure cipher suites to be used for SSL connections.
    #ssl.cipher_suites: []

    # Configure curve types for ECDHE based cipher suites.
    #ssl.curve_types: []

  #---------------------------- APM Server - ILM Index Lifecycle Management ----------------------------

  #ilm:
    # Supported values are `auto`, `true` and `false`.
    # `true`: Make use of Elasticsearch's Index Lifecycle Management (ILM) for APM indices. If no Elasticsearch output is
    # configured or the configured instance does not support ILM, APM Server cannot apply ILM and must create
    # unmanaged indices instead.
    # `false`: APM Server does not make use of ILM in Elasticsearch.
    # `auto`: If an Elasticsearch output is configured with default index and indices settings, and the configured
    # Elasticsearch instance supports ILM, `auto` will resolve to `true`. Otherwise `auto` will resolve to `false`.
    # Default value is `auto`.
    #enabled: "auto"

    #setup:
      # Only disable setup if you want to set up everything related to ILM on your own.
      # When setup is enabled, the APM Server creates:
      # - aliases and ILM policies if `apm-server.ilm.enabled` resolves to `true`.
      # - An ILM specific template per event type. This is required to map ILM aliases and policies to indices. In case
      # ILM is disabled, the templates will be created without any ILM settings.
      # Be aware that if you turn off setup, you need to manually manage event type specific templates on your own.
      # If you simply want to disable ILM, use the above setting, `apm-server.ilm.enabled`, instead.
      # Defaults to true.
      #enabled: true

      # Configure whether or not existing policies and ILM related templates should be updated. This needs to be
      # set to true when customizing your policies.
      # Defaults to false.
      #overwrite: false

      # Set `require_policy` to `false` when policies are set up outside of APM Server but referenced here.
      # Default value is `true`.
      #require_policy: true

      # Customized mappings will be merged with the default setup, so you only need to configure mappings for the
      # event types, policies, and index suffixes that you want to customize.
      # Indices are named in this way: `apm-%{[observer.version]}-%{[event.type]}-{index_suffix}`,
      # e.g., apm-7.9.0-span-custom*. The `index_suffix` is optional.
      # NOTE: When configuring an `index_suffix`, ensure that no previously set up templates conflict with the
      #       newly configured ones. If an index matches multiple templates with the same order, the settings of
      #       the templates will override each other. Any conflicts need to be cleaned up manually.
      # NOTE: When customizing `setup.template.name` and `setup.template.pattern`, ensure they still match the indices.
      #mapping:
        #- event_type: "error"
        #  policy_name: "apm-rollover-30-days"
        #  index_suffix: ""
        #- event_type: "span"
        #  policy_name: "apm-rollover-30-days"
        #  index_suffix: ""
        #- event_type: "transaction"
        #  policy_name: "apm-rollover-30-days"
        #  index_suffix: ""
        #- event_type: "metric"
        #  policy_name: "apm-rollover-30-days"
        #  index_suffix: ""

      # Configured policies are added to pre-defined default policies.
      # If a policy with the same name as a default policy is configured, the configured policy overwrites the default policy.
      #policies:
        #- name: "apm-rollover-30-days"
          #policy:
            #phases:
              #hot:
                #actions:
                  #rollover:
                    #max_size: "50gb"
                    #max_age: "30d"
                  #set_priority:
                    #priority: 100
              #warm:
                #min_age: "30d"
                #actions:
                  #set_priority:
                    #priority: 50
                  #readonly: {}



  #---------------------------- APM Server - Experimental Jaeger integration ----------------------------

  # When enabling Jaeger integration, APM Server acts as Jaeger collector. It supports jaeger.thrift over HTTP
  # and gRPC. This is an experimental feature, use with care.
  #
  # WARNING: This configuration is deprecated, and will be removed in the 8.0 release.
  #
  # Jaeger gRPC is now served on the same port as Elastic APM agents, defined by the
  # "apm-server.host" configuration; it is implicitly enabled, and an agent tag called
  # "elastic-apm-auth" is required when auth is enabled.
  #jaeger:
    #grpc:
      # Set to true to enable the Jaeger gRPC collector service.
      #enabled: false

      # Defines the gRPC host and port the server is listening on.
      # Defaults to the standard Jaeger gRPC collector port 14250.
      #host: "0.0.0.0:14250"

      # Set to the name of a process tag to use for authorizing
      # Jaeger agents.
      #
      # The tag value should have the same format as an HTTP
      # Authorization header, i.e. "Bearer <secret_token>" or
      # "ApiKey <base64(id:key)>".
      #
      # By default (if the auth_tag value is empty), authorization
      # does not apply to Jaeger agents.
      #auth_tag: ""

    #http:
      # Set to true to enable the Jaeger HTTP collector endpoint.
      #enabled: false

      # Defines the HTTP host and port the server is listening on.
      # Defaults to the standard Jaeger HTTP collector port 14268.
      #host: "0.0.0.0:14268"

#================================= General =================================

# Data is buffered in a memory queue before it is published to the configured output.
# The memory queue will present all available events (up to the outputs
# bulk_max_size) to the output, the moment the output is ready to serve
# another batch of events.
#queue:
  # Queue type by name (default 'mem').
  #mem:
    # Max number of events the queue can buffer.
    #events: 4096

    # Hints the minimum number of events stored in the queue,
    # before providing a batch of events to the outputs.
    # The default value is set to 2048.
    # A value of 0 ensures events are immediately available
    # to be sent to the outputs.
    #flush.min_events: 2048

    # Maximum duration after which events are available to the outputs,
    # if the number of events stored in the queue is < `flush.min_events`.
    #flush.timeout: 1s

# Sets the maximum number of CPUs that can be executing simultaneously. The
# default is the number of logical CPUs available in the system.
#max_procs:

#================================= Template =================================

# A template is used to set the mapping in Elasticsearch.
# By default template loading is enabled and the template is loaded.
# These settings can be adjusted to load your own template or overwrite existing ones.

# Set to false to disable template loading.
#setup.template.enabled: true

# Template name. By default the template name is "apm-%{[observer.version]}"
# The template name and pattern has to be set in case the elasticsearch index pattern is modified.
#setup.template.name: "apm-%{[observer.version]}"

# Template pattern. By default the template pattern is "apm-%{[observer.version]}-*" to apply to the default index settings.
# The first part is the version of apm-server and then -* is used to match all daily indices.
# The template name and pattern has to be set in case the elasticsearch index pattern is modified.
#setup.template.pattern: "apm-%{[observer.version]}-*"

# Path to fields.yml file to generate the template.
#setup.template.fields: "${path.config}/fields.yml"

# Overwrite existing template.
#setup.template.overwrite: false

# Elasticsearch template settings.
#setup.template.settings:

  # A dictionary of settings to place into the settings.index dictionary
  # of the Elasticsearch template. For more details, please check
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html
  #index:
    #number_of_shards: 1
    #codec: best_compression
    #number_of_routing_shards: 30
    #mapping.total_fields.limit: 2000

#============================= Elastic Cloud =============================

# These settings simplify using APM Server with the Elastic Cloud (https://cloud.elastic.co/).

# The cloud.id setting overwrites the `output.elasticsearch.hosts` option.
# You can find the `cloud.id` in the Elastic Cloud web UI.
#cloud.id:

# The cloud.auth setting overwrites the `output.elasticsearch.username` and
# `output.elasticsearch.password` settings. The format is `<user>:<pass>`.
#cloud.auth:

#================================ Outputs =================================

output:
  elasticsearch:
    hosts: ["http://elasticsearch01:9200","http://elasticsearch02:9200","http://elasticsearch03:9200"]
    username: $ELASTICSEARCH_USERNAME
    password: $ELASTICSEARCH_PASSWORD

# output.elasticsearch.index: "application-monitoring-%{[agent.version]}-%{+yyyy.MM.dd}"
# setup.template.name: "apm"
# setup.template.pattern: "apm-*"

setup.kibana.host: http://kibana:5601
setup.kibana.username: $ELASTICSEARCH_USERNAME
setup.kibana.password: $ELASTICSEARCH_PASSWORD

xpack.monitoring.enabled: true
